// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enum to define the type of question in the Answer model
enum QuestionType {
  GLOBAL // The daily question, same for all groups
  PACKAGE // A question from a group's subscribed package
}

model Profile {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
  username       String  @unique
  profilePicture String?
  bio            String?
  location       String?

  friends  Profile[] @relation("Friendship")
  friendOf Profile[] @relation("Friendship")

  matches          Profile[] @relation("Match")
  matchedBy        Profile[] @relation("Match")
  groups           Group[]   @relation("GroupMembers")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  Group            Group?    @relation(fields: [groupId], references: [id])
  groupId          String?
  adminOf          Group[]   @relation("GroupAdmins")
}

model Group {
  id          String    @id @default(uuid())
  name        String
  description String?
  members     Profile[] @relation("GroupMembers")
  messages    Message[]
  admin       Profile[] @relation("GroupAdmins")
  image       String?
  Profile     Profile[]

  // Questions and answers
  answers Answer[]

  // A group can subscribe to multiple packages.
  subscribedPackages Package[] @relation("GroupPackageSubscriptions")

  // Time when the daily question is sent
  dailyQuestionTime String? @default("20:00")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sender     Profile  @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   Profile  @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Package {
  id          String     @id @default(uuid())
  name        String
  description String?
  questions   Question[]
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Groups using this package
  subscribedByGroups Group[] @relation("GroupPackageSubscriptions")
}

model Question {
  id        String   @id @default(uuid())
  text      String
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  answers   Answer[]
}

model Answer {
  id String @id @default(uuid())

  // Context
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  groupId    String
  group      Group    @relation(fields: [groupId], references: [id])
  date       DateTime @default(now()) @db.Date // Use the Date type to ensure one entry per day

  // This JSON field stores all votes.
  // Format: { "voterProfileId": "chosenProfileId", ... }
  // This is MUCH more efficient than one row per vote.
  votes Json @default("{}")

  type QuestionType

  // Ensures only one question can be asked in a group per day.
  @@unique([groupId, date])
}

// Auth Related models - Better Auth
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  profile       Profile?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
