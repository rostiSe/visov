// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id             String  @id @default(uuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
  username       String  @unique
  profilePicture String?
  bio            String?
  location       String?

  friends  Profile[] @relation("Friendship")
  friendOf Profile[] @relation("Friendship")

  matches          Profile[] @relation("Match")
  matchedBy        Profile[] @relation("Match")
  groups           Group[]   @relation("GroupMembers")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  Group            Group?    @relation(fields: [groupId], references: [id])
  groupId          String?
  adminOf          Group[]   @relation("GroupAdmins")

  // Voting relations
  votesCast     Answer[] @relation("Voter")
  votesReceived Answer[] @relation("ChosenUser")
}

model Group {
  id          String    @id @default(uuid())
  name        String
  description String?
  members     Profile[] @relation("GroupMembers")
  messages    Message[]
  admin       Profile[] @relation("GroupAdmins")
  image       String?
  Profile     Profile[]

  // Questions and answers
  answers        Answer[]
  dailyQuestions DailyQuestion[]

  // Active package for the group
  activePackage   Package? @relation("ActivePackage", fields: [activePackageId], references: [id])
  activePackageId String?

  // Time when the daily question is sent
  dailyQuestionTime String? @default("20:00")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sender     Profile  @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   Profile  @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Package {
  id          String     @id @default(uuid())
  name        String
  description String?
  questions   Question[]
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Groups using this package
  groups Group[] @relation("ActivePackage")
}

model Question {
  id             String          @id @default(uuid())
  text           String
  package        Package         @relation(fields: [packageId], references: [id])
  packageId      String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  answers        Answer[]
  dailyQuestions DailyQuestion[]
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  // Who voted
  voter   Profile @relation("Voter", fields: [voterId], references: [id])
  voterId String

  // Who was chosen
  chosenUser   Profile @relation("ChosenUser", fields: [chosenUserId], references: [id])
  chosenUserId String

  // Group context
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  // Link to daily question if applicable
  dailyQuestion   DailyQuestion? @relation(fields: [dailyQuestionId], references: [id])
  dailyQuestionId String?

  answeredAt DateTime @default(now())

  @@unique([voterId, questionId, groupId])
}

model DailyQuestion {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  date       DateTime @default(now())
  isActive   Boolean  @default(false)

  // Store the answers for this daily question
  answers Answer[]

  @@unique([questionId, groupId, date])
}

// Auth Related models - Better Auth

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  profile       Profile?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
